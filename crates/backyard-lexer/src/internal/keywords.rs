use crate::{ error::LexResult, lexer::{ ControlSnapshot, Lexer }, token::{ Token, TokenType } };

pub struct KeywordToken;

impl KeywordToken {
  const KEYS: [&'static str; 75] = [
    "abstract",
    "array",
    "as",
    "break",
    "callable",
    "case",
    "catch",
    "class",
    "clone",
    "const",
    "continue",
    "declare",
    "default",
    "do",
    "echo",
    "else",
    "elseif",
    "enddeclare",
    "endfor",
    "endforeach",
    "endif",
    "endswitch",
    "endwhile",
    "enum",
    "exit",
    "eval",
    "die",
    "extends",
    "false",
    "final",
    "finally",
    "fn",
    "for",
    "foreach",
    "from",
    "function",
    "get",
    "global",
    "goto",
    "if",
    "implements",
    "include",
    "include_once",
    "instanceof",
    "insteadof",
    "interface",
    "list",
    "and",
    "or",
    "match",
    "namespace",
    "new",
    "null",
    "print",
    "private",
    "protected",
    "public",
    "readonly",
    "require",
    "require_once",
    "return",
    "static",
    "true",
    "parent",
    "self",
    "set",
    "switch",
    "throw",
    "trait",
    "try",
    "use",
    "var",
    "while",
    "yield",
    "xor",
  ];

  pub fn is_keyword(input: &str) -> bool {
    Self::KEYS.contains(&input)
  }

  pub fn lex(lexer: &mut Lexer, input: &str, snapshot: &ControlSnapshot) -> LexResult {
    match input {
      "abstract" => Ok(vec![Token::new(TokenType::Abstract, input, snapshot)]),
      "array" => Ok(vec![Token::new(TokenType::Array, input, snapshot)]),
      "as" => Ok(vec![Token::new(TokenType::As, input, snapshot)]),
      "break" => Ok(vec![Token::new(TokenType::Break, input, snapshot)]),
      "callable" => Ok(vec![Token::new(TokenType::Callable, input, snapshot)]),
      "case" => Ok(vec![Token::new(TokenType::Case, input, snapshot)]),
      "catch" => Ok(vec![Token::new(TokenType::Catch, input, snapshot)]),
      "class" => Ok(vec![Token::new(TokenType::Class, input, snapshot)]),
      "clone" => Ok(vec![Token::new(TokenType::Clone, input, snapshot)]),
      "const" => Ok(vec![Token::new(TokenType::Const, input, snapshot)]),
      "continue" => Ok(vec![Token::new(TokenType::Continue, input, snapshot)]),
      "declare" => Ok(vec![Token::new(TokenType::Declare, input, snapshot)]),
      "default" => Ok(vec![Token::new(TokenType::Default, input, snapshot)]),
      "do" => Ok(vec![Token::new(TokenType::Do, input, snapshot)]),
      "echo" => Ok(vec![Token::new(TokenType::Echo, input, snapshot)]),
      "else" => Ok(vec![Token::new(TokenType::Else, input, snapshot)]),
      "elseif" => Ok(vec![Token::new(TokenType::ElseIf, input, snapshot)]),
      "enddeclare" => Ok(vec![Token::new(TokenType::EndDeclare, input, snapshot)]),
      "endfor" => Ok(vec![Token::new(TokenType::EndFor, input, snapshot)]),
      "endforeach" => Ok(vec![Token::new(TokenType::EndForeach, input, snapshot)]),
      "endif" => Ok(vec![Token::new(TokenType::EndIf, input, snapshot)]),
      "endswitch" => Ok(vec![Token::new(TokenType::EndSwitch, input, snapshot)]),
      "endwhile" => Ok(vec![Token::new(TokenType::EndWhile, input, snapshot)]),
      "enum" => Ok(vec![Token::new(TokenType::Enum, input, snapshot)]),
      "exit" => Ok(vec![Token::new(TokenType::Exit, input, snapshot)]),
      "eval" => Ok(vec![Token::new(TokenType::Eval, input, snapshot)]),
      "die" => Ok(vec![Token::new(TokenType::Die, input, snapshot)]),
      "extends" => Ok(vec![Token::new(TokenType::Extends, input, snapshot)]),
      "false" => Ok(vec![Token::new(TokenType::False, input, snapshot)]),
      "final" => Ok(vec![Token::new(TokenType::Final, input, snapshot)]),
      "finally" => Ok(vec![Token::new(TokenType::Finally, input, snapshot)]),
      "fn" => Ok(vec![Token::new(TokenType::Fn, input, snapshot)]),
      "for" => Ok(vec![Token::new(TokenType::For, input, snapshot)]),
      "foreach" => Ok(vec![Token::new(TokenType::Foreach, input, snapshot)]),
      "from" => Ok(vec![Token::new(TokenType::From, input, snapshot)]),
      "function" => Ok(vec![Token::new(TokenType::Function, input, snapshot)]),
      "get" => Ok(vec![Token::new(TokenType::Get, input, snapshot)]),
      "global" => Ok(vec![Token::new(TokenType::Global, input, snapshot)]),
      "goto" => Ok(vec![Token::new(TokenType::Goto, input, snapshot)]),
      "if" => Ok(vec![Token::new(TokenType::If, input, snapshot)]),
      "implements" => Ok(vec![Token::new(TokenType::Implements, input, snapshot)]),
      "include" => Ok(vec![Token::new(TokenType::Include, input, snapshot)]),
      "include_once" => Ok(vec![Token::new(TokenType::IncludeOnce, input, snapshot)]),
      "instanceof" => Ok(vec![Token::new(TokenType::InstanceOf, input, snapshot)]),
      "insteadof" => Ok(vec![Token::new(TokenType::InsteadOf, input, snapshot)]),
      "interface" => Ok(vec![Token::new(TokenType::Interface, input, snapshot)]),
      "list" => Ok(vec![Token::new(TokenType::List, input, snapshot)]),
      "and" => Ok(vec![Token::new(TokenType::And, input, snapshot)]),
      "or" => Ok(vec![Token::new(TokenType::Or, input, snapshot)]),
      "match" => Ok(vec![Token::new(TokenType::Match, input, snapshot)]),
      "namespace" => Ok(vec![Token::new(TokenType::Namespace, input, snapshot)]),
      "new" => Ok(vec![Token::new(TokenType::New, input, snapshot)]),
      "null" => Ok(vec![Token::new(TokenType::Null, input, snapshot)]),
      "print" => Ok(vec![Token::new(TokenType::Print, input, snapshot)]),
      // "private" => Ok(vec![Token::new(TokenType::Private, input, snapshot)]),
      // "protected" => Ok(vec![Token::new(TokenType::Protected, input, snapshot)]),
      // "public" => Ok(vec![Token::new(TokenType::Public, input, snapshot)]),
      "readonly" => Ok(vec![Token::new(TokenType::Readonly, input, snapshot)]),
      "require" => Ok(vec![Token::new(TokenType::Require, input, snapshot)]),
      "require_once" => Ok(vec![Token::new(TokenType::RequireOnce, input, snapshot)]),
      "return" => Ok(vec![Token::new(TokenType::Return, input, snapshot)]),
      "static" => Ok(vec![Token::new(TokenType::Static, input, snapshot)]),
      "parent" => Ok(vec![Token::new(TokenType::Parent, input, snapshot)]),
      "self" => Ok(vec![Token::new(TokenType::SelfKeyword, input, snapshot)]),
      "set" => Ok(vec![Token::new(TokenType::Set, input, snapshot)]),
      "switch" => Ok(vec![Token::new(TokenType::Switch, input, snapshot)]),
      "throw" => Ok(vec![Token::new(TokenType::Throw, input, snapshot)]),
      "trait" => Ok(vec![Token::new(TokenType::Trait, input, snapshot)]),
      "true" => Ok(vec![Token::new(TokenType::True, input, snapshot)]),
      "try" => Ok(vec![Token::new(TokenType::Try, input, snapshot)]),
      "use" => Ok(vec![Token::new(TokenType::Use, input, snapshot)]),
      "var" => Ok(vec![Token::new(TokenType::Var, input, snapshot)]),
      "while" => Ok(vec![Token::new(TokenType::While, input, snapshot)]),
      "yield" => Ok(vec![Token::new(TokenType::Yield, input, snapshot)]),
      "xor" => Ok(vec![Token::new(TokenType::Xor, input, snapshot)]),
      _ => Self::check_visibility(lexer, input, snapshot),
    }
  }

  fn check_visibility(lexer: &mut Lexer, input: &str, snapshot: &ControlSnapshot) -> LexResult {
    let token_type = match input {
      "private" => [TokenType::Private, TokenType::PrivateGet, TokenType::PrivateSet],
      "protected" => [TokenType::Protected, TokenType::ProtectedGet, TokenType::ProtectedSet],
      "public" => [TokenType::Public, TokenType::PublicGet, TokenType::PublicSet],
      _ => {
        return Err(lexer.control.error_unrecognized(&input.to_owned()));
      }
    };
    if let Some(pos) = lexer.control.peek_char_n(None, 5) {
      if pos == "(get)" {
        lexer.control.consume(5);
        return Ok(vec![Token::new(token_type[1], format!("{}(get)", input), snapshot)]);
      } else if pos == "(set)" {
        lexer.control.consume(5);
        return Ok(vec![Token::new(token_type[2], format!("{}(set)", input), snapshot)]);
      }
    }
    Ok(vec![Token::new(token_type[0], input, snapshot)])
  }
}
