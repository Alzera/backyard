/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum TokenType {
  Type = 'Type',
  Identifier = 'Identifier',
  Magic = 'Magic',
  Whitespace = 'Whitespace',
  NumberHex = 'NumberHex',
  Number = 'Number',
  Variable = 'Variable',
  VariableBracketOpen = 'VariableBracketOpen',
  VariableBracketClose = 'VariableBracketClose',
  Arrow = 'Arrow',
  Assignment = 'Assignment',
  IsEqual = 'IsEqual',
  IsIdentical = 'IsIdentical',
  Reference = 'Reference',
  BitwiseAndAssignment = 'BitwiseAndAssignment',
  BitwiseAnd = 'BitwiseAnd',
  BooleanAnd = 'BooleanAnd',
  Attribute = 'Attribute',
  CommentLine = 'CommentLine',
  CloseTag = 'CloseTag',
  NullsafeObjectAccess = 'NullsafeObjectAccess',
  NullsafeObjectAccessBracketOpen = 'NullsafeObjectAccessBracketOpen',
  CoalesceAssignment = 'CoalesceAssignment',
  Coalesce = 'Coalesce',
  QuestionMark = 'QuestionMark',
  CloseTagShort = 'CloseTagShort',
  ModulusAssignment = 'ModulusAssignment',
  Modulus = 'Modulus',
  BitwiseXorAssignment = 'BitwiseXorAssignment',
  BitwiseXor = 'BitwiseXor',
  ExponentiationAssignment = 'ExponentiationAssignment',
  MultiplicationAssignment = 'MultiplicationAssignment',
  Exponentiation = 'Exponentiation',
  Multiplication = 'Multiplication',
  DivisionAssignment = 'DivisionAssignment',
  CommentDoc = 'CommentDoc',
  CommentBlock = 'CommentBlock',
  Division = 'Division',
  ConcatenationAssignment = 'ConcatenationAssignment',
  Ellipsis = 'Ellipsis',
  Concatenation = 'Concatenation',
  BitwiseOrAssignment = 'BitwiseOrAssignment',
  BooleanOr = 'BooleanOr',
  BitwiseOr = 'BitwiseOr',
  SubtractionAssignment = 'SubtractionAssignment',
  ObjectAccessBracketOpen = 'ObjectAccessBracketOpen',
  ObjectAccessBracketClose = 'ObjectAccessBracketClose',
  ObjectAccess = 'ObjectAccess',
  Subtraction = 'Subtraction',
  IsGreaterOrEqual = 'IsGreaterOrEqual',
  IsGreater = 'IsGreater',
  BitwiseShiftRightAssignment = 'BitwiseShiftRightAssignment',
  BitwiseShiftRight = 'BitwiseShiftRight',
  IsLesserOrEqual = 'IsLesserOrEqual',
  IsLesser = 'IsLesser',
  IsNotEqual = 'IsNotEqual',
  BitwiseShiftLeftAssignment = 'BitwiseShiftLeftAssignment',
  BitwiseShiftLeft = 'BitwiseShiftLeft',
  OpenTagShort = 'OpenTagShort',
  OpenTag = 'OpenTag',
  OpenTagEcho = 'OpenTagEcho',
  Spaceship = 'Spaceship',
  HeredocStart = 'HeredocStart',
  Colon = 'Colon',
  DoubleColon = 'DoubleColon',
  BooleanNegate = 'BooleanNegate',
  IsNotIdentical = 'IsNotIdentical',
  AdditionAssignment = 'AdditionAssignment',
  Addition = 'Addition',
  LeftCurlyBracket = 'LeftCurlyBracket',
  AdvanceInterpolationOpen = 'AdvanceInterpolationOpen',
  AdvanceInterpolationClose = 'AdvanceInterpolationClose',
  EncapsedStringOpen = 'EncapsedStringOpen',
  EncapsedStringClose = 'EncapsedStringClose',
  EncapsedString = 'EncapsedString',
  String = 'String',
  PostDecrement = 'PostDecrement',
  PostIncrement = 'PostIncrement',
  PreDecrement = 'PreDecrement',
  PreIncrement = 'PreIncrement',
  LeftParenthesis = 'LeftParenthesis',
  RightParenthesis = 'RightParenthesis',
  RightCurlyBracket = 'RightCurlyBracket',
  LeftSquareBracket = 'LeftSquareBracket',
  RightSquareBracket = 'RightSquareBracket',
  BackSlash = 'BackSlash',
  Comma = 'Comma',
  Semicolon = 'Semicolon',
  ShortForm = 'ShortForm',
  ShortFormStart = 'ShortFormStart',
  Abstract = 'Abstract',
  Array = 'Array',
  As = 'As',
  Break = 'Break',
  Callable = 'Callable',
  Case = 'Case',
  Catch = 'Catch',
  Class = 'Class',
  Clone = 'Clone',
  Const = 'Const',
  Continue = 'Continue',
  Declare = 'Declare',
  Default = 'Default',
  Do = 'Do',
  Echo = 'Echo',
  Else = 'Else',
  ElseIf = 'ElseIf',
  EndDeclare = 'EndDeclare',
  EndFor = 'EndFor',
  EndForeach = 'EndForeach',
  EndIf = 'EndIf',
  EndSwitch = 'EndSwitch',
  EndWhile = 'EndWhile',
  Enum = 'Enum',
  Exit = 'Exit',
  Eval = 'Eval',
  Die = 'Die',
  Extends = 'Extends',
  Final = 'Final',
  Finally = 'Finally',
  Fn = 'Fn',
  For = 'For',
  Foreach = 'Foreach',
  From = 'From',
  Function = 'Function',
  Global = 'Global',
  Goto = 'Goto',
  If = 'If',
  Implements = 'Implements',
  Include = 'Include',
  IncludeOnce = 'IncludeOnce',
  InstanceOf = 'InstanceOf',
  InsteadOf = 'InsteadOf',
  Interface = 'Interface',
  List = 'List',
  And = 'And',
  Or = 'Or',
  Match = 'Match',
  Namespace = 'Namespace',
  New = 'New',
  Print = 'Print',
  Private = 'Private',
  Protected = 'Protected',
  Public = 'Public',
  Readonly = 'Readonly',
  Require = 'Require',
  RequireOnce = 'RequireOnce',
  Return = 'Return',
  Static = 'Static',
  Parent = 'Parent',
  SelfKeyword = 'SelfKeyword',
  Switch = 'Switch',
  Throw = 'Throw',
  Trait = 'Trait',
  Try = 'Try',
  Use = 'Use',
  Var = 'Var',
  While = 'While',
  Yield = 'Yield',
  Xor = 'Xor'
}
export interface Token {
  tokenType: TokenType
  value: string
}
export declare function lex(input: string): Array<Token>
export declare function parse(input: string): Array<object>
