/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const { existsSync, readFileSync } = require('fs')
const { join } = require('path')

const { platform, arch } = process

let nativeBinding = null
let localFileExisted = false
let loadError = null

function isMusl() {
  // For Node 10
  if (!process.report || typeof process.report.getReport !== 'function') {
    try {
      const lddPath = require('child_process').execSync('which ldd').toString().trim()
      return readFileSync(lddPath, 'utf8').includes('musl')
    } catch (e) {
      return true
    }
  } else {
    const { glibcVersionRuntime } = process.report.getReport().header
    return !glibcVersionRuntime
  }
}

switch (platform) {
  case 'android':
    switch (arch) {
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'backyard.android-arm64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./backyard.android-arm64.node')
          } else {
            nativeBinding = require('backyard-android-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm':
        localFileExisted = existsSync(join(__dirname, 'backyard.android-arm-eabi.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./backyard.android-arm-eabi.node')
          } else {
            nativeBinding = require('backyard-android-arm-eabi')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Android ${arch}`)
    }
    break
  case 'win32':
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(
          join(__dirname, 'backyard.win32-x64-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./backyard.win32-x64-msvc.node')
          } else {
            nativeBinding = require('backyard-win32-x64-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'ia32':
        localFileExisted = existsSync(
          join(__dirname, 'backyard.win32-ia32-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./backyard.win32-ia32-msvc.node')
          } else {
            nativeBinding = require('backyard-win32-ia32-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'backyard.win32-arm64-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./backyard.win32-arm64-msvc.node')
          } else {
            nativeBinding = require('backyard-win32-arm64-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Windows: ${arch}`)
    }
    break
  case 'darwin':
    localFileExisted = existsSync(join(__dirname, 'backyard.darwin-universal.node'))
    try {
      if (localFileExisted) {
        nativeBinding = require('./backyard.darwin-universal.node')
      } else {
        nativeBinding = require('backyard-darwin-universal')
      }
      break
    } catch {}
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(__dirname, 'backyard.darwin-x64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./backyard.darwin-x64.node')
          } else {
            nativeBinding = require('backyard-darwin-x64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'backyard.darwin-arm64.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./backyard.darwin-arm64.node')
          } else {
            nativeBinding = require('backyard-darwin-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on macOS: ${arch}`)
    }
    break
  case 'freebsd':
    if (arch !== 'x64') {
      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`)
    }
    localFileExisted = existsSync(join(__dirname, 'backyard.freebsd-x64.node'))
    try {
      if (localFileExisted) {
        nativeBinding = require('./backyard.freebsd-x64.node')
      } else {
        nativeBinding = require('backyard-freebsd-x64')
      }
    } catch (e) {
      loadError = e
    }
    break
  case 'linux':
    switch (arch) {
      case 'x64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'backyard.linux-x64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./backyard.linux-x64-musl.node')
            } else {
              nativeBinding = require('backyard-linux-x64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'backyard.linux-x64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./backyard.linux-x64-gnu.node')
            } else {
              nativeBinding = require('backyard-linux-x64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'arm64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'backyard.linux-arm64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./backyard.linux-arm64-musl.node')
            } else {
              nativeBinding = require('backyard-linux-arm64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'backyard.linux-arm64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./backyard.linux-arm64-gnu.node')
            } else {
              nativeBinding = require('backyard-linux-arm64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'arm':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'backyard.linux-arm-musleabihf.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./backyard.linux-arm-musleabihf.node')
            } else {
              nativeBinding = require('backyard-linux-arm-musleabihf')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'backyard.linux-arm-gnueabihf.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./backyard.linux-arm-gnueabihf.node')
            } else {
              nativeBinding = require('backyard-linux-arm-gnueabihf')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'riscv64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'backyard.linux-riscv64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./backyard.linux-riscv64-musl.node')
            } else {
              nativeBinding = require('backyard-linux-riscv64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'backyard.linux-riscv64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./backyard.linux-riscv64-gnu.node')
            } else {
              nativeBinding = require('backyard-linux-riscv64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 's390x':
        localFileExisted = existsSync(
          join(__dirname, 'backyard.linux-s390x-gnu.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./backyard.linux-s390x-gnu.node')
          } else {
            nativeBinding = require('backyard-linux-s390x-gnu')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Linux: ${arch}`)
    }
    break
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`)
}

if (!nativeBinding) {
  if (loadError) {
    throw loadError
  }
  throw new Error(`Failed to load native binding`)
}

const { TokenType, BodyType, ArrayNode, ArrayItemNode, ArrayLookupNode, AssignmentNode, BinNode, BlockNode, CallNode, ArgumentNode, ClassNode, CommentBlockNode, CommentDocNode, CommentLineNode, ConstNode, ConstPropertyNode, DeclareNode, DeclareArgumentNode, DoWhileNode, EnumNode, EnumItemNode, EvalNode, ExitNode, ForeachNode, ForNode, FunctionNode, ArrowFunctionNode, AnonymousFunctionNode, ParameterNode, IdentifierNode, IfNode, IncludeNode, InstanceOfNode, InterfaceNode, LabelNode, ListNode, MagicNode, MatchNode, MatchArmNode, MethodNode, NamespaceNode, NumberNode, ObjectAccessNode, ParenthesisNode, CastNode, PostNode, PreNode, ProgramNode, PropertyItemNode, PropertyNode, BreakNode, ContinueNode, ReturnNode, EchoNode, NewNode, ThrowNode, PrintNode, ParentNode, StaticNode, CloneNode, GlobalNode, GotoNode, StaticLookupNode, StringNode, EncapsedNode, EncapsedPartNode, SwitchNode, CaseNode, TernaryNode, TraitNode, TraitUseNode, TraitUseAliasNode, TraitUsePrecedenceNode, TryNode, CatchNode, TypeNode, UseNode, VariableNode, WhileNode, YieldFromNode, YieldNode, lex, parse, generate } = nativeBinding

module.exports.TokenType = TokenType
module.exports.BodyType = BodyType
module.exports.ArrayNode = ArrayNode
module.exports.ArrayItemNode = ArrayItemNode
module.exports.ArrayLookupNode = ArrayLookupNode
module.exports.AssignmentNode = AssignmentNode
module.exports.BinNode = BinNode
module.exports.BlockNode = BlockNode
module.exports.CallNode = CallNode
module.exports.ArgumentNode = ArgumentNode
module.exports.ClassNode = ClassNode
module.exports.CommentBlockNode = CommentBlockNode
module.exports.CommentDocNode = CommentDocNode
module.exports.CommentLineNode = CommentLineNode
module.exports.ConstNode = ConstNode
module.exports.ConstPropertyNode = ConstPropertyNode
module.exports.DeclareNode = DeclareNode
module.exports.DeclareArgumentNode = DeclareArgumentNode
module.exports.DoWhileNode = DoWhileNode
module.exports.EnumNode = EnumNode
module.exports.EnumItemNode = EnumItemNode
module.exports.EvalNode = EvalNode
module.exports.ExitNode = ExitNode
module.exports.ForeachNode = ForeachNode
module.exports.ForNode = ForNode
module.exports.FunctionNode = FunctionNode
module.exports.ArrowFunctionNode = ArrowFunctionNode
module.exports.AnonymousFunctionNode = AnonymousFunctionNode
module.exports.ParameterNode = ParameterNode
module.exports.IdentifierNode = IdentifierNode
module.exports.IfNode = IfNode
module.exports.IncludeNode = IncludeNode
module.exports.InstanceOfNode = InstanceOfNode
module.exports.InterfaceNode = InterfaceNode
module.exports.LabelNode = LabelNode
module.exports.ListNode = ListNode
module.exports.MagicNode = MagicNode
module.exports.MatchNode = MatchNode
module.exports.MatchArmNode = MatchArmNode
module.exports.MethodNode = MethodNode
module.exports.NamespaceNode = NamespaceNode
module.exports.NumberNode = NumberNode
module.exports.ObjectAccessNode = ObjectAccessNode
module.exports.ParenthesisNode = ParenthesisNode
module.exports.CastNode = CastNode
module.exports.PostNode = PostNode
module.exports.PreNode = PreNode
module.exports.ProgramNode = ProgramNode
module.exports.PropertyItemNode = PropertyItemNode
module.exports.PropertyNode = PropertyNode
module.exports.BreakNode = BreakNode
module.exports.ContinueNode = ContinueNode
module.exports.ReturnNode = ReturnNode
module.exports.EchoNode = EchoNode
module.exports.NewNode = NewNode
module.exports.ThrowNode = ThrowNode
module.exports.PrintNode = PrintNode
module.exports.ParentNode = ParentNode
module.exports.StaticNode = StaticNode
module.exports.CloneNode = CloneNode
module.exports.GlobalNode = GlobalNode
module.exports.GotoNode = GotoNode
module.exports.StaticLookupNode = StaticLookupNode
module.exports.StringNode = StringNode
module.exports.EncapsedNode = EncapsedNode
module.exports.EncapsedPartNode = EncapsedPartNode
module.exports.SwitchNode = SwitchNode
module.exports.CaseNode = CaseNode
module.exports.TernaryNode = TernaryNode
module.exports.TraitNode = TraitNode
module.exports.TraitUseNode = TraitUseNode
module.exports.TraitUseAliasNode = TraitUseAliasNode
module.exports.TraitUsePrecedenceNode = TraitUsePrecedenceNode
module.exports.TryNode = TryNode
module.exports.CatchNode = CatchNode
module.exports.TypeNode = TypeNode
module.exports.UseNode = UseNode
module.exports.VariableNode = VariableNode
module.exports.WhileNode = WhileNode
module.exports.YieldFromNode = YieldFromNode
module.exports.YieldNode = YieldNode
module.exports.lex = lex
module.exports.parse = parse
module.exports.generate = generate
